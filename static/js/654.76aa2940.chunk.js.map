{"version":3,"file":"static/js/654.76aa2940.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.ts","components/Phonebook/Phonebook.styled.ts","redux/contacts/items/itemsSelectors.ts","components/ContactForm/ContactForm.tsx","components/ContactItem/ContactItem.styled.ts","components/ContactItem/ContactItem.tsx","components/ContactList/ContactList.styled.ts","components/ContactList/ContactList.tsx","redux/contacts/filter/filterSelector.ts","components/Filter/Filter.tsx","components/Modal/Modal.styled.ts","components/Modal/Modal.tsx","components/Phonebook/Phonebook.tsx","pages/ContactsPage/ContactsPage.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n    margin: 0 auto;\n    max-width: fit-content;\n    min-width: 250px;\n    padding: 30px 30px 30px 30px;\n    /* border: 1px solid; */\n    border-radius: 15px;\n    background-color: #fff;\n    box-shadow: 0px 5px 50px 0px rgba(0, 0, 0, 0.15);\n`\nexport const StyledLabel = styled.label`\n    display: block;\n    margin-bottom: 10px;\n`\n\nexport const StyledInput = styled.input`\n    display: block;\n    margin-top: 5px;\n    padding: 5px;\n    border-width: 1px;\n    border-style: solid;\n    border-radius: 15px;\n    border-color: #c8c5c5;\n    height: 25px;\n    width: 95%;\n`\nexport const StyledButton = styled.button`\n    border: none;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    cursor: pointer;\n    font-size: 12px;\n    font-family: Roboto, Verdana, Tahoma, sans;\n    padding: 12px 16px;\n    margin-top: 10px;\n    border-radius: 100px;\n    color: #fff;\n    background: #2196F3;\n    &:hover {\n        background: #39a1f4;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    }\n    &:active {\n        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n        background: #0d8aee;\n    }\n`","import styled from 'styled-components';\n\nexport const StyledPhonebook = styled.div`\n    position: relative;\n    max-width: 800px;\n    height: 100vh;\n    margin-left: auto;\n    margin-right: auto;\n    font-family: Roboto, Verdana, Tahoma, sans;\n    padding: 100px 25px;\n`\n\nexport const AddContactButton = styled.button`\n    position: absolute;\n    top: 50px;\n    right: 50px;\n    width: 100px;\n    height: 100px;\n    border-radius: 50%;\n    border-color: transparent;\n    background-color:  rgba(64, 163, 248, 0.5);\n    color: white;\n    font-size: 50px;\n    transition: all .25s cubic-bezier(0.42, 0, 0.45, 0.96);\n    &::before{\n        content:\"+\";\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        position: absolute;\n        top: 0px;\n        right: 0px;\n        width: 100px;\n        height: 100px;\n        border-radius: 50%;\n        background-color:  rgba(64, 163, 248, 0.2);\n        box-shadow: 0px 4px 22px 0px rgba(0, 0, 0, 0.05);\n        transition: all .25s cubic-bezier(0.42, 0, 0.45, 0.96);\n\n    }\n    &:hover,:focus{\n        background-color:  #40A3F8;\n        box-shadow: 0px 4px 22px 0px rgba(0, 0, 0, 0.1);\n        &::before{\n            top:-25px;\n            right:-25px;\n            width: 150px;\n            height: 150px;            \n            background-color:  rgba(64, 163, 248, 0.2);\n            box-shadow: 0px 4px 22px 0px rgba(0, 0, 0, 0.06);\n        }\n    }\n\n\n`","import { RootState } from \"redux/store\";\n\n\nexport const getContacts = (store: RootState) => store.contacts.items;\nexport const getIsLoading = (store: RootState) => store.contacts.isLoading;\nexport const getError = (store: RootState) => store.contacts.error;\n\n\nexport const getFilteredContacts = (store: RootState) => {\n    const { contacts, filter } = store;\n    \n    if (!filter) {\n        return contacts.items;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = contacts.items.filter((item) => {\n        const normalizedName = item.name.toLocaleLowerCase();\n        const result = normalizedName.includes(normalizedFilter);\n        return result;\n    })\n\n    return filteredContacts;\n\n};\n\n","import { nanoid } from 'nanoid';\nimport { StyledForm, StyledLabel, StyledInput } from './ContactForm.styled';\nimport { SetStateAction, useState } from \"react\";\n// redux\n\nimport { getContacts } from \"redux/contacts/items/itemsSelectors\";\nimport { addContact } from \"redux/contacts/items/itemsOperations\";\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\nimport Button from 'components/Button/Button';\n\ntype Props = {\n    setModalOpen: React.Dispatch<SetStateAction<boolean>>;\n}\n\nfunction ContactForm({setModalOpen}: Props) {\n    const [name, setName] = useState(\"\");\n    const [number, setNumber] = useState(\"\");\n    const contacts = useAppSelector(getContacts);\n    const dispatch = useAppDispatch();\n\n    const isDuplicate = ({ name } : {name :string}) => {\n        return contacts.find(item => item.name === name);\n    };\n\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        \n        switch (event.target.name) {\n            case 'name':\n                return setName(event.target.value);\n            case 'number':\n                return setNumber(event.target.value);\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const contact = { 'name': name, 'number': number };\n        if (isDuplicate(contact)) {\n            alert(`${contact.name} is already in contacts`)\n            return\n        };\n        const action = addContact(contact);\n        dispatch(action);\n\n        setName(\"\");\n        setNumber(\"\");\n        setModalOpen(false);\n    }\n\n    return (\n        <StyledForm onSubmit = {handleSubmit}>\n            <StyledLabel> Name\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange = {handleChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </StyledLabel>\n            <StyledLabel> Number\n                <StyledInput\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange= {handleChange}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    />\n            </StyledLabel>\n            <Button type=\"submit\">Add contact</Button>\n        </StyledForm>\n    )   \n};\n\nexport default ContactForm;","import styled from 'styled-components';\n\nexport const StyledButton = styled.button`\n    width: 20px;\n    height: 20px;\n    border: none;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    cursor: pointer;\n    font-size: 11px;\n    font-family: Roboto, Verdana, Tahoma, sans;\n    padding: 2px 2px 2px 2px;\n    margin-left: 10px;\n    border-radius: 50%;\n    color: #fff;\n    background: #9b59b6;\n    &:hover {\n        background: #a66bbe;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    }\n    &:active {\n        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n        background: #8f4bab;\n    }\n`\nexport const Contact = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 10px 15px;\n    border-radius: 15px;\n    box-shadow: 0px 5px 50px 0px rgba(0, 0, 0, 0.15);\n    &:not(:last-child) {\n        margin-bottom: 5px;\n    }\n`\nexport const ContactName = styled.div`\n    margin-bottom: 5px;\n`\nexport const ContactNamber = styled.div`\n    color: #6e5f5f;\n    font-size: 12px;\n    padding-left: 2px;\n`\nexport const ContactInfo = styled.div``","import { StyledButton, Contact, ContactName, ContactNamber, ContactInfo } from './ContactItem.styled';\n\ntype Props = {\n    id: string;\n    name: string;\n    number: string;\n    onClick: (id: string)=> void;\n}\n\nconst ContactItem = ({ id, name, number, onClick }: Props) => {\n    return (\n        <>\n            <Contact>\n                <ContactInfo>\n                    <ContactName>{name}</ContactName>\n                    <ContactNamber>{number} </ContactNamber>\n                </ContactInfo>\n                <StyledButton type='button' onClick={()=> onClick(id)}>X</StyledButton>\n            </Contact>\n        </>\n    );\n}; \n\n\nexport default ContactItem;","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n    max-height: 100%;\n    list-style: none;\n    background-color: #fff;\n    box-shadow: 0px 5px 50px 0px rgba(0, 0, 0, 0.15);\n    border-radius: 15px;\n    padding: 15px;\n    overflow-y: scroll;\n`","import ContactItem from \"../ContactItem/ContactItem\";\n// redux\nimport { removeContact } from \"redux/contacts/items/itemsOperations\";\nimport { getFilteredContacts } from \"redux/contacts/items/itemsSelectors\";\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\nimport { StyledList } from \"./ContactList.styled\";\n\nconst ContactList = () => {\n    const filteredContacts = useAppSelector(getFilteredContacts);\n    const dispatch = useAppDispatch();\n\n    const onRemoveContact = (id: string) => {\n        const action = removeContact(id);\n        dispatch(action);\n    };\n\n\n    return (\n        filteredContacts.length ? <StyledList>\n            {filteredContacts.map(({id, name, number }) => (\n                <ContactItem key={id} id={id} name={name} number={number} onClick={onRemoveContact} />\n            ))}\n        </StyledList> : <p>Sorry, no contacts match the filter</p>\n    );\n};\n\n\nexport default ContactList;","import { RootState } from \"redux/store\";\n\nexport const getFilter = (store: RootState) => {\n    return store.filter;\n};","import { StyledInput } from '../ContactForm/ContactForm.styled';\n// redux\nimport { getFilter } from \"redux/contacts/filter/filterSelector\";\nimport { setFilter } from \"redux/contacts/filter/filterSlice\";\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\n\nconst Filter = () => {\n    const filter = useAppSelector(getFilter);\n    const dispatch = useAppDispatch();\n\n    const OnFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const { value } = e.target;\n        dispatch(setFilter(value));\n    }\n\n\n    return (\n        <>\n            <label>Find contact by name\n                <StyledInput type=\"text\" value={filter} onChange={OnFilterChange} />\n            </label>\n        </>\n    )\n};\n\nexport default Filter;","import styled from \"styled-components\";\n\nexport const Backdrop = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.25);\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n    overflow-y: scroll;\n    transition-property: opacity, visibility;\n    transition-duration: 250ms;\n    transition-delay: cubic-bezier(0.4, 0, 0.2, 1);\n`\n\nexport const ModalStyled = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) scale(1);\n    padding: 50px 50px 50px 50px;\n    background-color: #fff;\n    width: fit-content;\n    height: fit-content;\n    border-radius: 4px;\n`\n\n","import React from 'react';\nimport { Backdrop, ModalStyled } from './Modal.styled';\n\ntype Props = {\n    children: React.ReactNode;\n    onClose: ()=>void;\n}\n\nfunction Modal({children, onClose}: Props) {\n  return (\n    <Backdrop onClick={onClose}>\n        <ModalStyled onClick={(event) => event.stopPropagation()}>\n            {children}\n        </ModalStyled>\n    </Backdrop>\n  )\n}\n\nexport default Modal;","import { AddContactButton, StyledPhonebook } from './Phonebook.styled';\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport { useEffect, useState } from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\n// redux\nimport { getContacts, getIsLoading, getError } from \"redux/contacts/items/itemsSelectors\";\nimport { fetchContacts } from 'redux/contacts/items/itemsOperations';\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\nimport Modal from 'components/Modal/Modal';\n\n\nexport function Phonebook() {\n    const contacts = useAppSelector(getContacts);\n    const isLoading = useAppSelector(getIsLoading);\n    const error = useAppSelector(getError);\n    const dispatch = useAppDispatch();\n\n    const [isModalShown, setIsModalShown] = useState(false);\n\n    const onModalOpen = () => {\n        setIsModalShown(true)\n;    }\n\n    const onModalClose = () => {\n        setIsModalShown(false);\n    }\n    \n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <StyledPhonebook>\n            <AddContactButton onClick={onModalOpen}></AddContactButton>\n            <h2>Contacts</h2>\n            {isLoading && <RotatingLines strokeColor=\"grey\" width=\"50\"/> }\n            {contacts.length ? <div><Filter /><ContactList /> </div> : <p>There are no contacts in your Phonebook.</p>}\n            {error && <p>Something went wrong. We are working on it.</p>} \n            {isModalShown && <Modal onClose = {onModalClose}><ContactForm setModalOpen={setIsModalShown}/></Modal>}           \n        </StyledPhonebook>\n    )\n};","import { Phonebook } from \"components/Phonebook\";\n\nexport default function ContactsPage() {\n    return (\n        <main>\n            <Phonebook/>\n        </main>\n    )\n}\n"],"names":["StyledForm","styled","StyledLabel","StyledInput","StyledPhonebook","AddContactButton","getContacts","store","contacts","items","getIsLoading","isLoading","getError","error","getFilteredContacts","filter","normalizedFilter","toLowerCase","item","name","toLocaleLowerCase","includes","setModalOpen","useState","setName","number","setNumber","useAppSelector","dispatch","useAppDispatch","handleChange","event","target","value","onSubmit","preventDefault","contact","find","isDuplicate","alert","action","addContact","id","nanoid","type","onChange","pattern","title","required","Button","StyledButton","Contact","ContactName","ContactNamber","ContactInfo","onClick","StyledList","filteredContacts","onRemoveContact","removeContact","length","map","getFilter","e","setFilter","Backdrop","ModalStyled","children","onClose","stopPropagation","Phonebook","isModalShown","setIsModalShown","useEffect","fetchContacts","strokeColor","width","ContactsPage"],"sourceRoot":""}