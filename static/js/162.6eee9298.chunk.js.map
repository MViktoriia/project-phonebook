{"version":3,"file":"static/js/162.6eee9298.chunk.js","mappings":"2OAEaA,EAAaC,EAAAA,GAAAA,KAAH,gRAUVC,EAAcD,EAAAA,GAAAA,MAAH,uEAKXE,EAAcF,EAAAA,GAAAA,MAAH,kOAWIA,EAAAA,GAAAA,OAAH,wlB,sECxBZG,E,QAAgBH,GAAAA,GAAH,+F,sDCS1B,IANA,YAAqC,IAAnBI,EAAkB,EAAlBA,SAChB,OACE,SAAC,IAAD,UAAgBA,GAEnB,C,0FCPYC,EAAgBL,EAAAA,GAAAA,QAAH,uOACK,SAAAM,GAAK,OAAIA,EAAMC,YAAcC,EAAAA,EAAxB,G,sDCQpC,IANA,YAAqC,IAAnBJ,EAAkB,EAAlBA,SAChB,OACE,SAAC,IAAD,UAAgBA,GAEnB,C,sECTYK,E,QAAgBT,GAAAA,IAAH,wK,+JCMX,SAASU,IAEpB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,KAEXC,EAAe,SAACC,GACtB,OAAQA,EAAMC,OAAOV,MACjB,IAAK,OACD,OAAOC,EAAYQ,EAAMC,OAAOC,OACpC,IAAK,QACD,OAAOR,EAASM,EAAMC,OAAOC,OACjC,IAAK,WACD,OAAON,EAAYI,EAAMC,OAAOC,OACpC,QACI,OAEP,EAWD,OACI,UAAC,KAAD,CAAYC,SAVK,SAACH,GAClBA,EAAMI,iBACN,IAAMC,EAAe,CAAE,KAAQd,EAAM,MAASE,EAAO,SAAYE,GACjEE,GAASS,EAAAA,EAAAA,IAASD,IAClBb,EAAY,IACZE,EAAS,IACTE,EAAY,GACf,EAGG,WACI,UAAC,KAAD,oBACI,SAAC,KAAD,CACIW,IAAMC,EAAAA,EAAAA,MACNC,KAAK,OACLlB,KAAK,OACLW,MAAOX,EACPmB,SAAUX,EAGVY,UAAQ,QAGhB,UAAC,KAAD,qBACI,SAAC,KAAD,CACIJ,IAAMC,EAAAA,EAAAA,MACNC,KAAK,QACLlB,KAAK,QACLW,MAAOT,EACPiB,SAAUX,EAEVY,UAAQ,QAGhB,UAAC,KAAD,wBACI,SAAC,KAAD,CACIJ,IAAMC,EAAAA,EAAAA,MACNC,KAAK,WACLlB,KAAK,WACLW,MAAOP,EACPe,SAAUX,EACVa,UAAW,EACXD,UAAQ,QAGhB,SAACE,EAAA,EAAD,CAAQJ,KAAK,SAAb,wBAGX,C,kCCrEc,SAASK,IACpB,OACI,2BACI,SAACC,EAAA,EAAD,WACI,UAACC,EAAA,EAAD,YACI,SAAC,IAAD,WACI,SAACC,EAAA,EAAD,+BAEJ,SAAC5B,EAAD,UAKnB,C,wDCnBM,IAkBImB,EAAS,eAACU,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACf,EAAIgB,GAWvD,OAREhB,IAFFgB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/ContactForm/ContactForm.styled.ts","components/Heading/Heading.styled.ts","components/Heading/Heading.tsx","components/Section/Section.styles.ts","components/Section/Section.tsx","pages/RegisterPage/RegisterPage.styled.ts","components/RegisterForm/RegisterForm.tsx","pages/RegisterPage/RegisterPage.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n    margin: 0 auto;\n    max-width: fit-content;\n    min-width: 250px;\n    padding: 30px 30px 30px 30px;\n    /* border: 1px solid; */\n    border-radius: 15px;\n    background-color: #fff;\n    box-shadow: 0px 5px 50px 0px rgba(0, 0, 0, 0.15);\n`\nexport const StyledLabel = styled.label`\n    display: block;\n    margin-bottom: 10px;\n`\n\nexport const StyledInput = styled.input`\n    display: block;\n    margin-top: 5px;\n    padding: 5px;\n    border-width: 1px;\n    border-style: solid;\n    border-radius: 15px;\n    border-color: #c8c5c5;\n    height: 25px;\n    width: 95%;\n`\nexport const StyledButton = styled.button`\n    border: none;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    cursor: pointer;\n    font-size: 12px;\n    font-family: Roboto, Verdana, Tahoma, sans;\n    padding: 12px 16px;\n    margin-top: 10px;\n    border-radius: 100px;\n    color: #fff;\n    background: #2196F3;\n    &:hover {\n        background: #39a1f4;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    }\n    &:active {\n        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n        background: #0d8aee;\n    }\n`","import styled from \"styled-components\"\n\n\n\nexport const StyledHeading = styled.h1`\n    font-size: 42px;\n    margin-block: 0;\n    margin-bottom: 20px;\n\n`","import React from 'react'\nimport { StyledHeading } from './Heading.styled';\n\ntype Props = {\n  children: React.ReactNode; \n}\n\nfunction Heading({children}: Props) {\n  return (\n    <StyledHeading>{children}</StyledHeading>\n  )\n}\n\nexport default Heading;","import styled from 'styled-components';\n\nimport { mainBg } from 'media';\n\nexport const StyledSection = styled.section<{$sectionBg?: string;}>`\n    /* background-image: url(${props => props.$sectionBg || mainBg}); */\n    /* background-repeat: no-repeat;\n    background-size: 100%;\n    background-position: top 50px; */\n    width: 100vw;\n    height: 100vh;\n    padding-top: 20px;\n`","import React from 'react'\nimport { StyledSection } from './Section.styles';\n\ntype Props = {\n    children: React.ReactNode;\n}\n\nfunction Section({children}: Props) {\n  return (\n    <StyledSection>{children}</StyledSection>\n  )\n};\n\nexport default Section","import styled from 'styled-components';\n\nexport const HeaderWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 0 auto;\n    width: fit-content;\n    padding-top: 20px;\n    overflow-y: hidden;\n`","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { StyledForm, StyledLabel, StyledInput } from '../ContactForm/ContactForm.styled';\nimport { useState } from 'react';\nimport { register } from 'redux/auth/authOperations';\nimport { useAppDispatch } from 'redux/hooks';\nimport Button from 'components/Button/Button';\n\nexport default function RegisterForm() {\n\n    const [name, setUserName] = useState(\"\");  \n    const [email, setEmail] = useState(\"\");  \n    const [password, setPassword] = useState(\"\");\n    const dispatch = useAppDispatch();\n    \n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.name) {\n        case 'name':\n            return setUserName(event.target.value);\n        case 'email':\n            return setEmail(event.target.value);\n        case 'password':\n            return setPassword(event.target.value);\n        default:\n            return;\n        }\n    };\n    \n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const registerData = { 'name': name, 'email': email, \"password\": password };\n        dispatch(register(registerData));\n        setUserName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n\n    return (\n        <StyledForm onSubmit={handleSubmit} >\n            <StyledLabel> Name\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </StyledLabel>\n            <StyledLabel> Email\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"email\"\n                    name=\"email\"\n                    value={email}\n                    onChange={handleChange}\n                    // pattern=\".+@globex\\.com\"\n                    required\n                    />\n            </StyledLabel>\n            <StyledLabel> Password\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={handleChange}\n                    minLength={8}\n                    required\n                />\n            </StyledLabel>\n            <Button type=\"submit\">Register</Button>\n        </StyledForm>\n    )\n}\n","import Container from 'components/Container/Container'\nimport RegisterForm from 'components/RegisterForm/RegisterForm'\nimport Section from 'components/Section/Section'\nimport React from 'react'\nimport { HeaderWrapper } from './RegisterPage.styled'\nimport Heading from 'components/Heading/Heading'\n\nexport default function RegisterPage() {\n    return (\n        <main>\n            <Section>\n                <Container>\n                    <HeaderWrapper>\n                        <Heading>Register form</Heading>\n                    </HeaderWrapper>\n                    <RegisterForm/>\n                </Container>\n            </Section>       \n        </main>\n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["StyledForm","styled","StyledLabel","StyledInput","StyledHeading","children","StyledSection","props","$sectionBg","mainBg","HeaderWrapper","RegisterForm","useState","name","setUserName","email","setEmail","password","setPassword","dispatch","useAppDispatch","handleChange","event","target","value","onSubmit","preventDefault","registerData","register","id","nanoid","type","onChange","required","minLength","Button","RegisterPage","Section","Container","Heading","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}