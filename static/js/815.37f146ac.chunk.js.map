{"version":3,"file":"static/js/815.37f146ac.chunk.js","mappings":"gQAEaA,EAAaC,EAAAA,GAAAA,KAAH,2IAMVC,EAAcD,EAAAA,GAAAA,MAAH,uEAKXE,EAAcF,EAAAA,GAAAA,MAAH,iJAOXG,EAAeH,EAAAA,GAAAA,OAAH,wlB,qICbV,SAASI,IAEpB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAACC,GACtB,OAAQA,EAAMC,OAAOV,MACjB,IAAK,OACD,OAAOC,EAAYQ,EAAMC,OAAOC,OACpC,IAAK,QACD,OAAOR,EAASM,EAAMC,OAAOC,OACjC,IAAK,WACD,OAAON,EAAYI,EAAMC,OAAOC,OACpC,QACI,OAEP,EAWD,OACI,UAAC,KAAD,CAAYC,SAVK,SAACH,GAClBA,EAAMI,iBACN,IAAMC,EAAe,CAAE,KAAQd,EAAM,MAASE,EAAO,SAAYE,GACjEE,GAASS,EAAAA,EAAAA,IAASD,IAClBb,EAAY,IACZE,EAAS,IACTE,EAAY,GACf,EAGG,WACI,UAAC,KAAD,oBACI,SAAC,KAAD,CACIW,IAAMC,EAAAA,EAAAA,MACNC,KAAK,OACLlB,KAAK,OACLW,MAAOX,EACPmB,SAAUX,EAGVY,UAAQ,QAGhB,UAAC,KAAD,qBACI,SAAC,KAAD,CACIJ,IAAMC,EAAAA,EAAAA,MACNC,KAAK,QACLlB,KAAK,QACLW,MAAOT,EACPiB,SAAUX,EAEVY,UAAQ,QAGhB,UAAC,KAAD,wBACI,SAAC,KAAD,CACIJ,IAAMC,EAAAA,EAAAA,MACNC,KAAK,WACLlB,KAAK,WACLW,MAAOP,EACPe,SAAUX,EACVa,UAAU,IACVD,UAAQ,QAGhB,SAAC,KAAD,CAAcF,KAAK,SAAnB,wBAGX,CCxEc,SAASI,IACpB,OACI,4BACI,2CACA,SAACxB,EAAD,MAGX,C,uDCTM,IAkBImB,EAAS,eAACM,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACX,EAAIY,GAWvD,OAREZ,IAFFY,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/ContactForm/ContactForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n    max-width: fit-content;\n    padding: 20px 200px 20px 20px;\n    border-color: black;\n    border: 1px solid;\n`\nexport const StyledLabel = styled.label`\n    display: block;\n    margin-bottom: 10px;\n`\n\nexport const StyledInput = styled.input`\n    display: block;\n    margin-top: 5px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #c8c5c5;\n`\nexport const StyledButton = styled.button`\n    border: none;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    cursor: pointer;\n    font-size: 12px;\n    font-family: Roboto, Verdana, Tahoma, sans;\n    padding: 12px 16px;\n    margin-top: 10px;\n    border-radius: 100px;\n    color: #fff;\n    background: #2196F3;\n    &:hover {\n        background: #39a1f4;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    }\n    &:active {\n        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n        background: #0d8aee;\n    }\n`","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { StyledForm, StyledLabel, StyledInput, StyledButton } from '../ContactForm/ContactForm.styled';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\n\nexport default function RegisterForm() {\n\n    const [name, setUserName] = useState(\"\");  \n    const [email, setEmail] = useState(\"\");  \n    const [password, setPassword] = useState(\"\");\n    const dispatch = useDispatch();\n    \n    const handleChange = (event) => {\n    switch (event.target.name) {\n        case 'name':\n            return setUserName(event.target.value);\n        case 'email':\n            return setEmail(event.target.value);\n        case 'password':\n            return setPassword(event.target.value);\n        default:\n            return;\n        }\n    };\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const registerData = { 'name': name, 'email': email, \"password\": password };\n        dispatch(register(registerData));\n        setUserName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n\n    return (\n        <StyledForm onSubmit={handleSubmit} >\n            <StyledLabel> Name\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </StyledLabel>\n            <StyledLabel> Email\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"email\"\n                    name=\"email\"\n                    value={email}\n                    onChange={handleChange}\n                    // pattern=\".+@globex\\.com\"\n                    required\n                    />\n            </StyledLabel>\n            <StyledLabel> Password\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={handleChange}\n                    minlength=\"8\"\n                    required\n                />\n            </StyledLabel>\n            <StyledButton type=\"submit\">Register</StyledButton>\n        </StyledForm>\n    )\n}\n","import RegisterForm from 'components/RegisterForm/RegisterForm'\nimport React from 'react'\n\nexport default function RegisterPage() {\n    return (\n        <div>\n            <h1>Register form</h1>\n            <RegisterForm/>                        \n        </div>\n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["StyledForm","styled","StyledLabel","StyledInput","StyledButton","RegisterForm","useState","name","setUserName","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","event","target","value","onSubmit","preventDefault","registerData","register","id","nanoid","type","onChange","required","minlength","RegisterPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}