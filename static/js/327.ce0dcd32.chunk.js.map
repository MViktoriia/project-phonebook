{"version":3,"file":"static/js/327.ce0dcd32.chunk.js","mappings":"mQAEaA,EAAaC,EAAAA,GAAAA,KAAH,2IAMVC,EAAcD,EAAAA,GAAAA,MAAH,uEAKXE,EAAcF,EAAAA,GAAAA,MAAH,iJAOXG,EAAeH,EAAAA,GAAAA,OAAH,wlB,4ICfV,SAASI,IAEpB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACMC,GAAWC,EAAAA,EAAAA,KAEXC,EAAe,SAACC,GAClB,OAAQA,EAAMC,OAAOC,MACjB,IAAK,QACD,OAAOR,EAASM,EAAMC,OAAOE,OACjC,IAAK,WACD,OAAOP,EAAYI,EAAMC,OAAOE,OACpC,QACI,OAEX,EAYD,OACI,UAAC,KAAD,CAAYC,SAXK,SAACJ,GAClBA,EAAMK,iBACN,IAAMC,EAAW,CAAE,MAASb,EAAO,SAAYE,GAE/CE,GAASU,EAAAA,EAAAA,IAAMD,IAEfZ,EAAS,IACTE,EAAY,GACf,EAGG,WACI,UAAC,KAAD,qBACI,SAAC,KAAD,CACIY,IAAMC,EAAAA,EAAAA,MACNC,KAAK,QACLR,KAAK,QACLC,MAAOV,EACPkB,SAAUZ,EACVa,UAAQ,QAGhB,UAAC,KAAD,wBACI,SAAC,KAAD,CACIJ,IAAMC,EAAAA,EAAAA,MACNC,KAAK,WACLR,KAAK,WACLC,MAAOR,EACPgB,SAAUZ,EACVa,UAAQ,QAGhB,SAAC,KAAD,CAAcF,KAAK,SAAnB,sBAGX,CCtDc,SAASG,IACpB,OACI,4BACI,wCACA,SAACtB,EAAD,MAGX,C,wDCTM,IAkBIkB,EAAS,eAACK,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACV,EAAIW,GAWvD,OAREX,IAFFW,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["components/ContactForm/ContactForm.styled.ts","components/LoginForm/LoginForm.tsx","pages/LoginPage/LoginPage.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n    max-width: fit-content;\n    padding: 20px 200px 20px 20px;\n    border-color: black;\n    border: 1px solid;\n`\nexport const StyledLabel = styled.label`\n    display: block;\n    margin-bottom: 10px;\n`\n\nexport const StyledInput = styled.input`\n    display: block;\n    margin-top: 5px;\n    border-width: 1px;\n    border-style: solid;\n    border-color: #c8c5c5;\n`\nexport const StyledButton = styled.button`\n    border: none;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    cursor: pointer;\n    font-size: 12px;\n    font-family: Roboto, Verdana, Tahoma, sans;\n    padding: 12px 16px;\n    margin-top: 10px;\n    border-radius: 100px;\n    color: #fff;\n    background: #2196F3;\n    &:hover {\n        background: #39a1f4;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    }\n    &:active {\n        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n        background: #0d8aee;\n    }\n`","import { StyledForm, StyledLabel, StyledInput, StyledButton } from '../ContactForm/ContactForm.styled';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { login } from 'redux/auth/authOperations';\nimport { useAppDispatch } from 'redux/hooks';\nexport default function LoginForm() {  \n    \n    const [email, setEmail] = useState(\"\");  \n    const [password, setPassword] = useState(\"\");\n    const dispatch = useAppDispatch();\n    \n    const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n        switch (event.target.name) {\n            case 'email':\n                return setEmail(event.target.value);\n            case 'password':\n                return setPassword(event.target.value);\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const authData = { 'email': email, \"password\": password };\n\n        dispatch(login(authData));\n\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n\n    return (\n        <StyledForm onSubmit={handleSubmit} >\n            <StyledLabel> Email\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"email\"\n                    name=\"email\"\n                    value={email}\n                    onChange={handleChange}\n                    required\n                    />\n            </StyledLabel>\n            <StyledLabel> Password\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={handleChange}\n                    required\n                />\n            </StyledLabel>\n            <StyledButton type=\"submit\">Log in</StyledButton>\n        </StyledForm>\n    )\n};\n","import LoginForm from 'components/LoginForm/LoginForm'\nimport React from 'react'\n\nexport default function LoginPage() {\n    return (\n        <div>\n            <h1>Login page</h1>\n            <LoginForm/>\n        </div>        \n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["StyledForm","styled","StyledLabel","StyledInput","StyledButton","LoginForm","useState","email","setEmail","password","setPassword","dispatch","useAppDispatch","handleChange","event","target","name","value","onSubmit","preventDefault","authData","login","id","nanoid","type","onChange","required","LoginPage","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}