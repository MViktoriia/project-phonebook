{"version":3,"file":"static/js/162.904658c0.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.ts","components/Heading/Heading.styled.ts","components/Heading/Heading.tsx","components/Section/Section.styles.ts","components/Section/Section.tsx","pages/HomePage/HomePage.styled.ts","pages/RegisterPage/RegisterPage.styled.ts","components/RegisterForm/RegisterForm.tsx","pages/RegisterPage/RegisterPage.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledForm = styled.form`\n    margin: 0 auto;\n    max-width: fit-content;\n    min-width: 250px;\n    padding: 30px 30px 30px 30px;\n    /* border: 1px solid; */\n    border-radius: 15px;\n    background-color: #fff;\n    box-shadow: 0px 5px 50px 0px rgba(0, 0, 0, 0.15);\n`\nexport const StyledLabel = styled.label`\n    display: block;\n    margin-bottom: 10px;\n`\n\nexport const StyledInput = styled.input`\n    display: block;\n    margin-top: 5px;\n    padding: 5px;\n    border-width: 1px;\n    border-style: solid;\n    border-radius: 15px;\n    border-color: #c8c5c5;\n    height: 25px;\n    width: 95%;\n`\nexport const StyledButton = styled.button`\n    border: none;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    cursor: pointer;\n    font-size: 12px;\n    font-family: Roboto, Verdana, Tahoma, sans;\n    padding: 12px 16px;\n    margin-top: 10px;\n    border-radius: 100px;\n    color: #fff;\n    background: #2196F3;\n    &:hover {\n        background: #39a1f4;\n        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n    }\n    &:active {\n        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2);\n        text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n        background: #0d8aee;\n    }\n`","import styled from \"styled-components\"\n\n\n\nexport const StyledHeading = styled.h1`\n    font-size: 42px;\n    margin-block: 0;\n    margin-bottom: 20px;\n\n`","import React from 'react'\nimport { StyledHeading } from './Heading.styled';\n\ntype Props = {\n  children: React.ReactNode; \n}\n\nfunction Heading({children}: Props) {\n  return (\n    <StyledHeading>{children}</StyledHeading>\n  )\n}\n\nexport default Heading;","import styled from 'styled-components';\n\nexport const StyledSection = styled.section`\n    height: 100%;\n    padding-top: 71px;\n  \n`","import React from 'react'\nimport { StyledSection } from './Section.styles';\n\ntype Props = {\n    children: React.ReactNode;\n}\n\nfunction Section({children}: Props) {\n  return (\n    <StyledSection>{children}</StyledSection>\n  )\n};\n\nexport default Section","import styled, { keyframes } from 'styled-components';\nimport { phoneImg } from 'media';\nimport { ContainerStyled } from 'components/Container/Container.styled';\nimport { StyledHeading } from 'components/Heading/Heading.styled';\n\nconst moovingText = keyframes`\n    from {\n            transform: \n                    translate(100%)\n    }                   \n    to {\n            transform: translate(0);\n    }   \n`\n\nexport const StyledMain = styled.main`\n    height: 100%;\n    min-height: 100vh;\n`\n\nexport const HomeContainer = styled(ContainerStyled)`\n    position: relative;\n`\n\nexport const TextWrapper = styled.div`\n    text-align: center;\n    padding-top: 30vh;\n    padding-left: 40px;\n    width: 50%;\n    overflow-y: hidden;\n`\n\nexport const HomeHeading = styled(StyledHeading)`\n    animation: ${moovingText} linear;\n    animation-duration: 3s;\n`\n\nexport const Text = styled.p`\n    margin-block: 0;\n    animation: show linear;\n    animation-duration: 2.5s;\n    @keyframes show {\n        0% {\n                opacity: 0 ;\n        }                   \n        100% {\n                opacity: 1;\n        }\n    }\n`\n\nexport const CircleBig = styled.div`\n    position: absolute;\n    width: 585px;\n    height: 585px;\n    border-radius: 50%;\n    background: rgba(64, 163, 248, 0.08);\n    top: 25px;\n    right: 40px;\n    animation: breath linear;\n    animation-duration: 3s;\n    /* transform: scale(5); */\n    pointer-events: none;\n    transform: translateY(-30px);\n    @keyframes breath {\n        0% {\n                transform: \n                           scale(1);\n        }\n        50% {\n                transform: scale(5)\n                           translateY(-15px);\n\n        }\n        100% {\n                transform: scale(1)\n                           translateY(-30px);\n        }\n    }\n`\nexport const CircleMedium = styled.div`\n    position: absolute;\n    width: 442px;\n    height: 442px;\n    border-radius: 50%;\n    background: rgba(64, 163, 248, 0.08);\n    top: 95px;\n    right: 110px;\n    animation: breath linear;\n    animation-duration: 3s;\n    pointer-events: none;\n    /* transform: scale(5); */\n    transform: translateY(-30px);\n    \n    @keyframes breath {\n        0% {\n                transform: \n                           scale(1);\n        }\n        50% {\n                transform: scale(5)\n                           translateY(-15px);\n\n        }\n        100% {\n                transform: scale(1)\n                           translateY(-30px);\n        }\n    }\n\n`\nexport const Orbit = styled.div`\n    position: absolute;\n    width: 330px;\n    height: 330px;\n    border-radius: 50%;\n    border: 2px solid #FFF;\n    box-shadow: 0px 2px 4px 0px rgba(100, 100, 100, 0.04);\n    top: 148px;\n    right: 165px;\n    transform: translateY(-30px);\n\n    ::before, ::after {\n        content: \"\";\n        position: absolute;\n        top: 158px; left: 158px; bottom: 0; z-index: 1;\n        animation: spin linear infinite;\n        width: 15px;\n        height: 15px;\n        border-radius: 50%;\n        background: linear-gradient(135deg, #FFF8F8 0%, #F8F1F1 100%);\n        filter: drop-shadow (0px 2px 4px rgba(100, 100, 100, 0.04));\n    }\n    ::before {\n        animation-duration: 10s;\n    }\n    ::after {\n        animation-duration: 12s;\n    }\n    @keyframes spin {\n        from {\n                transform: rotate(0deg)\n                           translate(-164px)\n                           rotate(0deg);\n        }\n        to {\n                transform: rotate(360deg)\n                           translate(-164px)\n                           rotate(-360deg);\n        }\n    }    \n`\nexport const CircleWite = styled.div`\n    position: absolute;\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n    background-color: #FFF;\n    box-shadow: 0px 4px 22px 0px rgba(0, 0, 0, 0.05);\n    top: 240px;\n    right: 255px;\n    transform: translateY(-30px);\n`\n\nexport const Phone = styled.div`\n    position: absolute;\n    width: 75px;\n    height: 75px;\n    border-radius: 50%;\n    background-image: url(${phoneImg});\n    background-color: #fff;\n    background-size: contain;\n    background-repeat: no-repeat;\n    box-shadow: 0px 4px 22px 0px rgba(0, 0, 0, 0.05);\n    top: 278px;\n    right: 293px;\n    transform: translateY(-30px);\n`","import styled from 'styled-components';\n\nexport const HeaderWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 0 auto;\n    width: fit-content;\n    padding-top: 20px;\n    overflow-y: hidden;\n`","import React from 'react';\nimport { nanoid } from 'nanoid';\nimport { StyledForm, StyledLabel, StyledInput } from '../ContactForm/ContactForm.styled';\nimport { useState } from 'react';\nimport { register } from 'redux/auth/authOperations';\nimport { useAppDispatch } from 'redux/hooks';\nimport Button from 'components/Button/Button';\n\nexport default function RegisterForm() {\n\n    const [name, setUserName] = useState(\"\");  \n    const [email, setEmail] = useState(\"\");  \n    const [password, setPassword] = useState(\"\");\n    const dispatch = useAppDispatch();\n    \n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    switch (event.target.name) {\n        case 'name':\n            return setUserName(event.target.value);\n        case 'email':\n            return setEmail(event.target.value);\n        case 'password':\n            return setPassword(event.target.value);\n        default:\n            return;\n        }\n    };\n    \n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const registerData = { 'name': name, 'email': email, \"password\": password };\n        dispatch(register(registerData));\n        setUserName(\"\");\n        setEmail(\"\");\n        setPassword(\"\");\n    }\n\n    return (\n        <StyledForm onSubmit={handleSubmit} >\n            <StyledLabel> Name\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    // title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </StyledLabel>\n            <StyledLabel> Email\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"email\"\n                    name=\"email\"\n                    value={email}\n                    onChange={handleChange}\n                    // pattern=\".+@globex\\.com\"\n                    required\n                    />\n            </StyledLabel>\n            <StyledLabel> Password\n                <StyledInput\n                    id = {nanoid()}\n                    type=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={handleChange}\n                    minLength={8}\n                    required\n                />\n            </StyledLabel>\n            <Button type=\"submit\">Register</Button>\n        </StyledForm>\n    )\n}\n","import Container from 'components/Container/Container'\nimport RegisterForm from 'components/RegisterForm/RegisterForm'\nimport Section from 'components/Section/Section'\nimport React from 'react'\nimport { HeaderWrapper } from './RegisterPage.styled'\nimport Heading from 'components/Heading/Heading'\nimport { StyledMain } from 'pages/HomePage/HomePage.styled'\n\nexport default function RegisterPage() {\n    return (\n        <StyledMain>\n            <Section>\n                <Container>\n                    <HeaderWrapper>\n                        <Heading>Register form</Heading>\n                    </HeaderWrapper>\n                    <RegisterForm/>\n                </Container>\n            </Section>       \n        </StyledMain>\n    )\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["StyledForm","styled","StyledLabel","StyledInput","StyledHeading","children","StyledSection","moovingText","keyframes","StyledMain","HomeContainer","ContainerStyled","TextWrapper","HomeHeading","Text","CircleBig","CircleMedium","Orbit","CircleWite","Phone","phoneImg","HeaderWrapper","RegisterForm","useState","name","setUserName","email","setEmail","password","setPassword","dispatch","useAppDispatch","handleChange","event","target","value","onSubmit","preventDefault","registerData","register","id","nanoid","type","onChange","required","minLength","Button","RegisterPage","Section","Container","Heading","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}